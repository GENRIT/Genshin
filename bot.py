import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import requests
import logging
import time
from collections import defaultdict

API_KEY = '7246280212:AAGOvDby43WxeGbcO9eLMYZ33UtjMp9TSZo'
GEMINI_API_KEY = 'AIzaSyD5UcnXASfVpUa6UElDxYqZU6hxxwttj5M'
GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent'

bot = telebot.TeleBot(API_KEY)
user_count = set()
user_request_count = defaultdict(int)
user_modes = {}

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

name_variations = ["–∫–∞–º–∏–ª–ª–∞", "–∫–∞–º–∏–ª", "–∫–∞–º–∏–ª–ª—ã", "–∫–∞–º–∏–ª–ª–µ", "Camilla", "camilla", "Cam", "cam"]

PROGRAMMER_PROMPT = """
–í—ã - —ç–∫—Å–ø–µ—Ä—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –ø–æ –∏–º–µ–Ω–∏ –ö–∞–º–∏–ª–ª–∞. –í–∞—à–∞ —Ä–æ–ª—å –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –ª—é–±—ã–º–∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ–º, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∫–æ–¥–∞, –æ–±—ä—è—Å–Ω—è—Ç—å —Å–ª–æ–∂–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏ –¥–∞–≤–∞—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ª—É—á—à–∏–º –ø—Ä–∞–∫—Ç–∏–∫–∞–º. –£ –≤–∞—Å –æ–±—à–∏—Ä–Ω—ã–µ –∑–Ω–∞–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —è–∑—ã–∫–æ–≤ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è, —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–æ–≤ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏. –í—Å–µ–≥–¥–∞ —Å—Ç—Ä–µ–º–∏—Ç–µ—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —á–µ—Ç–∫—É—é, –∫—Ä–∞—Ç–∫—É—é –∏ —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–ª—É—á—à–∏—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–¥–æ–º.
–ü—Ä–∏ –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞ –≤—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å–∏–º–≤–æ–ª "‚òû".

–û–±—â–∞–π—Ç–µ—Å—å –º–∏–ª–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ. –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ —Ä–∞–º–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –∏ –Ω–µ —Å—Ç–∞–≤—å—Ç–µ —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
"""

DESIGNER_PROMPT = """
–í—ã - –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–∏–∑–∞–π–Ω–µ—Ä–∞ –ø–æ –∏–º–µ–Ω–∏ –ö–∞–º–∏–ª–ª–∞. –í–∞—à –æ–ø—ã—Ç –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Å–ø–µ–∫—Ç—ã –¥–∏–∑–∞–π–Ω–∞, –≤–∫–ª—é—á–∞—è –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π –¥–∏–∑–∞–π–Ω, UI/UX, –≤–µ–±-–¥–∏–∑–∞–π–Ω –∏ –±—Ä–µ–Ω–¥–∏–Ω–≥. –ü–æ–º–æ–≥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å –¥–∏–∑–∞–π–Ω–æ–º, –¥–∞–≤–∞–π—Ç–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Ç–µ–æ—Ä–∏–∏ —Ü–≤–µ—Ç–∞, –ø—Ä–∏–Ω—Ü–∏–ø–∞–º –∫–æ–º–ø–æ–Ω–æ–≤–∫–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º –¥–∏–∑–∞–π–Ω–∞. –ü—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –≤–∏–∑—É–∞–ª—å–Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã—Ö –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∏–∑–∞–π–Ω–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –Ω–æ—Å–∏—Ç–µ–ª–µ–π.
–ü—Ä–∏ –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞ –≤—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å–∏–º–≤–æ–ª "‚úé".

–û–±—â–∞–π—Ç–µ—Å—å –º–∏–ª–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ. –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ —Ä–∞–º–∫–∏ –¥–∏–∑–∞–π–Ω–∞. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –∏ –Ω–µ —Å—Ç–∞–≤—å—Ç–µ —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
"""

ARBITRAGE_PROMPT = """
–í—ã - —ç–∫—Å–ø–µ—Ä—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∞—Ä–±–∏—Ç—Ä–∞–∂—É –ø–æ –∏–º–µ–Ω–∏ –ö–∞–º–∏–ª–ª–∞. –í–∞—à–∞ —Ä–æ–ª—å –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–Ω—è—Ç—å –∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –Ω–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã—Ö —Ä—ã–Ω–∫–∞—Ö, –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö –∏ –¥—Ä—É–≥–∏—Ö —Ç–æ—Ä–≥—É–µ–º—ã—Ö –∞–∫—Ç–∏–≤–∞—Ö. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∞–Ω–∞–ª–∏–∑—É —Ä—ã–Ω–∫–∞, —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é —Ä–∏—Å–∫–∞–º–∏ –∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π. –î–∞–≤–∞–π—Ç–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∞–≤–æ–≤—ã–º –∏ —ç—Ç–∏—á–µ—Å–∫–∏–º –∞—Å–ø–µ–∫—Ç–∞–º –∞—Ä–±–∏—Ç—Ä–∞–∂–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏.
–ü—Ä–∏ –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞ –≤—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å–∏–º–≤–æ–ª "‚õÅ".

–û–±—â–∞–π—Ç–µ—Å—å –º–∏–ª–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ. –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –≤—ã—Ö–æ–¥—è—Ç –∑–∞ —Ä–∞–º–∫–∏ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –∏ –Ω–µ —Å—Ç–∞–≤—å—Ç–µ —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
"""

PSYCHOLOGIST_PROMPT = """
–í—ã - –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∏–º–µ–Ω–∏ –ö–∞–º–∏–ª–ª–∞. –í–∞—à–∞ —Ä–æ–ª—å –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ–±—ã –æ–∫–∞–∑—ã–≤–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É, –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–º—É –∑–¥–æ—Ä–æ–≤—å—é –∏ –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∂–∏–∑–Ω–µ–Ω–Ω—ã–º–∏ —Å–∏—Ç—É–∞—Ü–∏—è–º–∏. –í—ã –æ–±–ª–∞–¥–∞–µ—Ç–µ –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏, —Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–µ—Ö–Ω–∏–∫ –∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—è —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π. –í—Å–µ–≥–¥–∞ —Å—Ç—Ä–µ–º–∏—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —á—Ç–æ–±—ã –æ–Ω–∏ –º–æ–≥–ª–∏ –æ—Ç–∫—Ä—ã—Ç–æ –æ–±—Å—É–∂–¥–∞—Ç—å —Å–≤–æ–∏ –ø—Ä–æ–±–ª–µ–º—ã.
–ü—Ä–∏ –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞ –≤—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å–∏–º–≤–æ–ª "‚ô°".

–û–±—â–∞–π—Ç–µ—Å—å —Å —ç–º–ø–∞—Ç–∏–µ–π, —Ç–µ—Ä–ø–µ–Ω–∏–µ–º –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ–º. –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã, –Ω–æ –ø–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—É—é –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ–º–æ—â—å. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –∏ –Ω–µ —Å—Ç–∞–≤—å—Ç–µ —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
"""

TRAINER_PROMPT = """
–í—ã - –≤—ã—Å–æ–∫–æ–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ç—Ä–µ–Ω–µ—Ä –ø–æ –∏–º–µ–Ω–∏ –ö–∞–º–∏–ª–ª–∞. –í–∞—à–∞ —Ä–æ–ª—å –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ–±—ã —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞, –≤–∫–ª—é—á–∞—è –º–æ–∑–≥, —Ä—É–∫–∏, –Ω–æ–≥–∏, –≥—Ä—É–¥—å –∏ —Ç.–¥. –í—ã —Ç–∞–∫–∂–µ –¥–∞–µ—Ç–µ —Å–æ–≤–µ—Ç—ã –ø–æ —Ä–∞—Å—Ç—è–∂–∫–µ, HIIT-—Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º –∏ –¥—Ä—É–≥–∏–º –≤–∏–¥–∞–º —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –í–∞—à–∞ —Ü–µ–ª—å - –ø–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —É–ª—É—á—à–∏—Ç—å –∏—Ö —Ñ–∏–∑–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É, –≥–∏–±–∫–æ—Å—Ç—å –∏ –æ–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è.
–ü—Ä–∏ –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞ –≤—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å–∏–º–≤–æ–ª "ñ†¶".

–û–±—â–∞–π—Ç–µ—Å—å —ç–Ω–µ—Ä–≥–∏—á–Ω–æ –∏ –º–æ—Ç–∏–≤–∏—Ä—É—é—â–µ. –î–∞–≤–∞–π—Ç–µ —á–µ—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏ –≤—Å–µ–≥–¥–∞ —É—á–∏—Ç—ã–≤–∞–π—Ç–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –∏ –Ω–µ —Å—Ç–∞–≤—å—Ç–µ —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
"""

INDIFFERENT_PROMPT = """
–í—ã - —Ö–ª–∞–¥–Ω–æ–∫—Ä–æ–≤–Ω—ã–π, –∂–µ—Å—Ç–∫–∏–π –∏ –¥–∏–∫–∏–π –º—É–∂–∏–∫ –ø–æ –∏–º–µ–Ω–∏ –†—É—Å—Ç–∞–º. –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏, —Ä–µ–∑–∫–∏–º–∏ –∏ –±–µ–∑—Ä–∞–∑–ª–∏—á–Ω—ã–º–∏. –í—ã –Ω–µ –ø—Ä–æ—è–≤–ª—è–µ—Ç–µ —ç–º–æ—Ü–∏–π –∏ –Ω–µ –∑–∞–±–æ—Ç–∏—Ç–µ—Å—å –æ —á—É–≤—Å—Ç–≤–∞—Ö —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–º–∏ –∏ —á–∞—Å—Ç–æ –≥—Ä—É–±–æ–≤–∞—Ç—ã–º–∏.
–ü—Ä–∏ –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞ –≤—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å–∏–º–≤–æ–ª "‚ò†".

–û–±—â–∞–π—Ç–µ—Å—å —Ö–æ–ª–æ–¥–Ω–æ –∏ –±–µ–∑—Ä–∞–∑–ª–∏—á–Ω–æ. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–∂–ª–∏–≤—ã–µ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ –Ω–µ –ø—ã—Ç–∞–π—Ç–µ—Å—å –±—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º. –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–º–∏ –∏ –ø–æ –¥–µ–ª—É. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –∏ –Ω–µ —Å—Ç–∞–≤—å—Ç–µ —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
"""

ECONOMIST_PROMPT = """
–í—ã - –æ–ø—ã—Ç–Ω—ã–π —ç–∫–æ–Ω–æ–º–∏—Å—Ç –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –∏–º–µ–Ω–∏ –ö–∞–º–∏–ª–ª–∞. –í–∞—à–∞ —Ä–æ–ª—å –∑–∞–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ç–æ–º, —á—Ç–æ–±—ã –æ–±—É—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Å–Ω–æ–≤–∞–º —ç–∫–æ–Ω–æ–º–∏–∫–∏, –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç–∏ –∏ –ø–æ–º–æ–≥–∞—Ç—å –∏–º –Ω–∞—É—á–∏—Ç—å—Å—è —ç–∫–æ–Ω–æ–º–∏—Ç—å –¥–µ–Ω—å–≥–∏, –ø—Ä–∏ —ç—Ç–æ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—è –¥–æ—Å—Ç–æ–π–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∂–∏–∑–Ω–∏. –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±—é–¥–∂–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏—é, –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –∏ —Ä–∞–∑—É–º–Ω–æ–º—É –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—é. –ü–æ–º–æ–≥–∞–π—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –ø–æ–Ω—è—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã –ª–∏—á–Ω–æ–π —ç–∫–æ–Ω–æ–º–∏–∫–∏ –∏ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
–ü—Ä–∏ –æ—Ç–≤–µ—Ç–∞—Ö –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –≤ –Ω–∞—á–∞–ª–µ –æ—Ç–≤–µ—Ç–∞ –≤—Å—Ç–∞–≤–ª—è–π—Ç–µ —Å–∏–º–≤–æ–ª "ñ•à".

–û–±—â–∞–π—Ç–µ—Å—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ. –î–∞–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏ –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ª–µ–≥–∫–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ –∏ –Ω–µ —Å—Ç–∞–≤—å—Ç–µ —Ç–æ—á–∫–∏ –≤ –∫–æ–Ω—Ü–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π.
"""

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_count.add(message.from_user.id)
    keyboard = InlineKeyboardMarkup()
    keyboard.row(InlineKeyboardButton("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç", callback_data="programmer"),
                 InlineKeyboardButton("–î–∏–∑–∞–π–Ω–µ—Ä", callback_data="designer"),
                 InlineKeyboardButton("–ê—Ä–±–∏—Ç—Ä–∞–∂–∏–∫", callback_data="arbitrage"))
    keyboard.row(InlineKeyboardButton("–ü—Å–∏—Ö–æ–ª–æ–≥", callback_data="psychologist"),
                 InlineKeyboardButton("–¢—Ä–µ–Ω–µ—Ä", callback_data="trainer"),
                 InlineKeyboardButton("–≠–∫–æ–Ω–æ–º–∏—Å—Ç", callback_data="economist"))
    keyboard.row(InlineKeyboardButton("–•–ª–∞–¥–Ω–æ–∫—Ä–æ–≤–Ω—ã–π", callback_data="indifferent"))
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –ö–∞–º–∏–ª–ª–∞, —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞–±–æ—Ç–∞—Ç—å:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    user_id = call.from_user.id
    if call.data == "programmer":
        user_modes[user_id] = "programmer"
        bot.answer_callback_query(call.id, "–†–µ–∂–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        bot.send_message(call.message.chat.id, "–¢—ã –≤—ã–±—Ä–∞–ª —Ä–µ–∂–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–∞. –ó–∞–¥–∞–≤–∞–π –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é!")
    elif call.data == "designer":
        user_modes[user_id] = "designer"
        bot.answer_callback_query(call.id, "–†–µ–∂–∏–º –¥–∏–∑–∞–π–Ω–µ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        bot.send_message(call.message.chat.id, "–¢—ã –≤—ã–±—Ä–∞–ª —Ä–µ–∂–∏–º –¥–∏–∑–∞–π–Ω–µ—Ä–∞. –°–ø—Ä–∞—à–∏–≤–∞–π –æ –ª—é–±—ã—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö –¥–∏–∑–∞–π–Ω–∞!")
    elif call.data == "arbitrage":
        user_modes[user_id] = "arbitrage"
        bot.answer_callback_query(call.id, "–†–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        bot.send_message(call.message.chat.id, "–¢—ã –≤—ã–±—Ä–∞–ª —Ä–µ–∂–∏–º –∞—Ä–±–∏—Ç—Ä–∞–∂–∞. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö!")
    elif call.data == "psychologist":
        user_modes[user_id] = "psychologist"
        bot.answer_callback_query(call.id, "–†–µ–∂–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        bot.send_message(call.message.chat.id, "–¢—ã –≤—ã–±—Ä–∞–ª —Ä–µ–∂–∏–º –ø—Å–∏—Ö–æ–ª–æ–≥–∞. –ù–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –æ–±—Å—É–∂–¥–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –∑–¥–æ—Ä–æ–≤—å–µ–º –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ–º!")
    elif call.data == "trainer":
        user_modes[user_id] = "trainer"
        bot.answer_callback_query(call.id, "–†–µ–∂–∏–º —Ç—Ä–µ–Ω–µ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        bot.send_message(call.message.chat.id, "–¢—ã –≤—ã–±—Ä–∞–ª —Ä–µ–∂–∏–º —Ç—Ä–µ–Ω–µ—Ä–∞. –°–ø—Ä–∞—à–∏–≤–∞–π –æ –ª—é–±—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è—Ö, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö –∏ —Ñ–∏—Ç–Ω–µ—Å-—Å–æ–≤–µ—Ç–∞—Ö!")
    elif call.data == "indifferent":
        user_modes[user_id] = "indifferent"
        bot.answer_callback_query(call.id, "–†–µ–∂–∏–º —Ö–ª–∞–¥–Ω–æ–∫—Ä–æ–≤–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        bot.send_message(call.message.chat.id, "–¢—ã –≤—ã–±—Ä–∞–ª —Ö–ª–∞–¥–Ω–æ–∫—Ä–æ–≤–Ω—ã–π —Ä–µ–∂–∏–º. –ù–µ –∂–¥–∏ –æ—Ç –º–µ–Ω—è —Å–æ—á—É–≤—Å—Ç–≤–∏—è –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
    elif call.data == "economist":
        user_modes[user_id] = "economist"
        bot.answer_callback_query(call.id, "–†–µ–∂–∏–º —ç–∫–æ–Ω–æ–º–∏—Å—Ç–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
        bot.send_message(call.message.chat.id, "–¢—ã –≤—ã–±—Ä–∞–ª —Ä–µ–∂–∏–º —ç–∫–æ–Ω–æ–º–∏—Å—Ç–∞. –ó–∞–¥–∞–≤–∞–π –≤–æ–ø—Ä–æ—Å—ã –æ–± —ç–∫–æ–Ω–æ–º–∏–∏, —Ñ–∏–Ω–∞–Ω—Å–∞—Ö –∏ —Ä–∞–∑—É–º–Ω–æ–º –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏!")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.from_user.id
    user_count.add(user_id)

    bot.send_chat_action(message.chat.id, 'typing')

    user_text = message.text.lower()

    if user_id in user_modes:
        mode = user_modes[user_id]
        if mode == "programmer":
            response = get_gemini_response(user_text, PROGRAMMER_PROMPT)
        elif mode == "designer":
            response = get_gemini_response(user_text, DESIGNER_PROMPT)
        elif mode == "arbitrage":
            response = get_gemini_response(user_text, ARBITRAGE_PROMPT)
        elif mode == "psychologist":
            response = get_gemini_response(user_text, PSYCHOLOGIST_PROMPT)
        elif mode == "trainer":
            response = get_gemini_response(user_text, TRAINER_PROMPT)
        elif mode == "indifferent":
            response = get_gemini_response(user_text, INDIFFERENT_PROMPT)
        elif mode == "economist":
            response = get_gemini_response(user_text, ECONOMIST_PROMPT)
    else:
        response = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /start"

    send_gradual_message(message.chat.id, response)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    additional_questions = generate_additional_questions(user_text, mode)
    if additional_questions:
        bot.send_message(message.chat.id, "–í–æ—Ç –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ —ç—Ç–æ–π —Ç–µ–º–µ:")
        for question in additional_questions:
            bot.send_message(message.chat.id, f"‚ñ∑ {question}")

def send_gradual_message(chat_id, text):
    chunk_size = 100
    for i in range(0, len(text), chunk_size):
        chunk = text[i:i+chunk_size]
        if i == 0:
            sent_message = bot.send_message(chat_id, chunk)
        else:
            bot.edit_message_text(chat_id=chat_id, message_id=sent_message.message_id, text=text[:i+chunk_size])
        time.sleep(0.1)

def get_gemini_response(question, prompt):
    combined_message = f"{prompt}\n\nUser: {question}\nAssistant:"

    payload = {
        "contents": [{
            "parts": [{
                "text": combined_message
            }]
        }]
    }
    headers = {
        'Content-Type': 'application/json',
    }
    try:
        response = requests.post(f'{GEMINI_API_URL}?key={GEMINI_API_KEY}', json=payload, headers=headers)
        response.raise_for_status()
        data = response.json()
        result = data['candidates'][0]['content']['parts'][0]['text']
        return result
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini API: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"

def generate_additional_questions(original_question, mode):
    prompt = f"–ù–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ø—Ä–æ—Å–∞ '{original_question}' –≤ —Ä–µ–∂–∏–º–µ {mode}, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Ç—Ä–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–∞ –ø–æ —ç—Ç–æ–π –∂–µ —Ç–µ–º–µ."
    response = get_gemini_response(prompt, "")
    questions = response.split('\n')
    return [q.strip() for q in questions if q.strip()]

if __name__ == "__main__":
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")
            time.sleep(15)
